/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font:1em monospace,monospace}a{background:0 0}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font:1em monospace,monospace}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font:100%/1.15 inherit;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}*,::after,::before{box-sizing:inherit}html{box-sizing:border-box}body,h1{margin:0;padding:0;color:#000;font-family:'Open Sans'}img{max-width:100%}a{text-decoration:none}.form{background:#1c1c1c;opacity:.9;border-radius:10px;flex:0 0 411px;padding:78px 54px 57px 60px;font-size:16px;margin-right:-205px}.form__input{display:block;width:100%;background:#fff;border-radius:4px;border:none;padding:17px 32px 15px;letter-spacing:1px;margin-bottom:20px}.form__input::-webkit-input-placeholder{font-size:16px;line-height:24px;color:#1c1c1c}.form__input::-moz-placeholder{font-size:16px;line-height:24px;color:#1c1c1c}.form__input:-ms-input-placeholder{font-size:16px;line-height:24px;color:#1c1c1c}.form__input::-ms-input-placeholder{font-size:16px;line-height:24px;color:#1c1c1c}.form__input::placeholder{font-size:16px;line-height:24px;color:#1c1c1c}.form__btn{background:#0ad9c6;border-radius:6px;width:100%;border:none;padding:14px 32px 13px;letter-spacing:.2px;margin-bottom:3px;font-size:16px;line-height:24px;font-weight:700}.form__btn:hover{background:rgba(10,217,198,.8)}.form__info{font-weight:300;font-size:13px;line-height:1.77;color:#7a7a7a;position:relative;padding-left:12px}.form__info::before{content:'*';position:absolute;left:0}@media screen and (max-width:1160px){.form{flex:0 0 343px;margin-right:-33.7%;padding:41px 25px 22px 21px}}@media screen and (max-width:750px){.form{margin-right:-14%;margin-left:-14%;padding:41px 23px 22px 21px;margin-bottom:50px}}@media screen and (max-width:480px){.form{margin-left:0}}.article{display:flex;margin-bottom:50px;align-items:center}.article:nth-of-type(even){flex-direction:row-reverse}.article:nth-of-type(even) .article__img{padding-left:72px;padding-right:0}.article__img{padding-right:72px;max-width:627px}.article__col{padding-top:2px}.article__title{font-size:22px;letter-spacing:-.7px;margin-bottom:35px}@media screen and (max-width:1100px){.article{margin-bottom:30px}.article:nth-of-type(even){flex-direction:row}.article:nth-of-type(even) .article__img{padding-left:0;padding-right:10px}.article__img{width:50%;-o-object-fit:cover;object-fit:cover;padding-right:10px}.article__col{width:50%;padding-left:42px;padding-top:0}.article__title{line-height:1.5}}@media screen and (max-width:750px){.article{flex-direction:column;margin-bottom:25px}.article:nth-of-type(even){flex-direction:column}.article:nth-of-type(even) .article__img{padding-right:0}.article__img{width:100%;padding:0}.article__col{width:100%;padding-left:0}.article__title{margin-bottom:18px}}.hero{background:#e3f5f2;display:flex;margin-bottom:68px}.hero__col{flex-basis:50%;background-size:cover}.hero__left{margin-top:10.6%;display:flex;align-items:flex-start;justify-content:flex-end;padding-left:30px}.hero__content{margin-bottom:32.5%;max-width:438px;margin-top:109px;margin-left:auto;padding-right:125px}.hero__text{max-width:300px}@media screen and (max-width:1160px){.hero{margin-bottom:41px}.hero__content{margin-top:63px;padding-right:60px;margin-bottom:43.5%}.hero__left{flex-basis:73%;margin-top:24.6%}.hero__right{flex-basis:27%;background-size:435%;background-position:69% 56%}}@media screen and (max-width:750px){.hero{padding-left:calc(18% - 30px)}.hero__content{margin-top:0;padding-right:15px;margin-bottom:7.5%;margin-left:auto;margin-right:auto}.hero__left{flex-basis:84%;margin-top:52px;padding-left:15px;flex-direction:column}.hero__right{flex-basis:16%;background-size:1260%;background-position:67% 0}}@media screen and (max-width:480px){.hero{padding-left:0}}.articles{max-width:1127px;margin:0 auto;padding:0 30px}@media screen and (max-width:750px){.articles{padding:0 15px}}.title{font-size:30px;letter-spacing:-1.5px;line-height:1.2;margin-bottom:30px}@media screen and (max-width:750px){.title{font-size:26px;letter-spacing:-1.3px;max-width:260px;line-height:1.4;margin-bottom:26px}}.pre-title{text-transform:uppercase;color:#999;font-size:14px;font-weight:700;letter-spacing:1px;margin-bottom:12px}.text{color:#7a7a7a;line-height:1.8;letter-spacing:-.1px}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
